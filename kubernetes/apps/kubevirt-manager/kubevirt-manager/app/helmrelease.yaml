---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app kubevirt-manager
  annotations:
    kustomize.toolkit.fluxcd.io/substitute: disabled
spec:
  interval: 30m
  chart:
    spec:
      verify:
        provider: cosign
      chart: app-template
      version: 3.7.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 2
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  uninstall:
    keepHistory: false
  values:
    global:
      propagateGlobalMetadataToPods: true
      labels:
        kubevirt-manager.io/version: 1.5.0
    serviceAccount:
      create: true
      name: *app
    controllers:
      kubevirt-manager:
        annotations:
          reloader.stakater.com/auto: "true"

        containers:
          app:
            image:
              repository: ghcr.io/d4rkfella/kubevirt-manager
              tag: 1.5.0@sha256:108e6162e515b90f04c09381ee7a65700bab4a947901a3038ba293c52f2ae114
            env:
              OIDC_DISCOVERY: "https://accounts.darkfellanetwork.com/realms/DarkfellaNET/.well-known/openid-configuration"
              OIDC_REDIRECT_URI: "https://kubevirt-manager.darkfellanetwork.com/callback"
              OIDC_CLIENT_ID: "6a7e3e1d-f71e-4b30-bbad-4457c3ba7c41"
              OIDC_CLIENT_SECRET:
                valueFrom:
                  secretKeyRef:
                    name: &secret kubevirt-manager-secret
                    key: CLIENT_SECRET
              OIDC_REDIS_HOST: dragonfly-cluster.database.svc.cluster.local
              OIDC_REDIS_PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: DRAGONFLY_PASSWORD
            ports:
              - name: https
                containerPort: 443
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }

    defaultPodOptions:
      hostAliases:
        - ip: "192.168.91.51"
          hostnames:
            - "accounts.darkfellanetwork.com"
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }

    service:
      app:
        controller: kubevirt-manager
        type: LoadBalancer
        allocateLoadBalancerNodePorts: false
        externalTrafficPolicy: Local
        annotations:
          external-dns.alpha.kubernetes.io/hostname: kubevirt-manager.darkfellanetwork.com
          lbipam.cilium.io/ips: 192.168.91.64
        ports:
          http:
            port: 443

    persistence:
      run-volume:
        type: emptyDir
        advancedMounts:
          kubevirt-manager:
            app:
              - path: /var/run/openresty

      log:
        type: emptyDir
        globalMounts:
          - path: /var/log/openresty

      prometheus-config:
        type: configMap
        name: prometheus-config
        globalMounts:
          - path: /etc/nginx/location.d/
            readOnly: true

      cert:
        type: secret
        name: kubevirt-manager-tls
        globalMounts:
          - path: /usr/local/openresty/nginx/ssl
            readOnly: true

      darkfellanet-root-ca:
        type: secret
        name: *secret
        globalMounts:
          - path: /etc/ssl/certs/Internal-Root-CA.crt
            subPath: ca.crt
            readOnly: true

      bundled-certs-dir:
        type: emptyDir
        globalMounts:
          - path: /etc/ssl/certs/bundled

      tmp:
        type: emptyDir

    rawResources:
      vm-standard:
        enabled: true
        apiVersion: scheduling.k8s.io/v1
        kind: PriorityClass
        labels:
          kubevirt-manager.io/managed: "true"
        spec:
          preemptionPolicy: Never
          value: 999999999
          description: Priority class for VMs which should not be preemtited.

      vm-preemptible:
        enabled: true
        apiVersion: scheduling.k8s.io/v1
        kind: PriorityClass
        labels:
          kubevirt-manager.io/managed: "true"
        spec:
          preemptionPolicy: PreemptLowerPriority
          value: 1000000
          description: Priority class for VMs which are allowed to be preemtited.

    rbac:
      roles:
        kubevirt-manager:
          enabled: true
          type: ClusterRole
          rules:
            - apiGroups: [""]
              resources: ["nodes", "namespaces"]
              verbs: ["get", "list"]
            - apiGroups: [""]
              resources: ["customresourcedefinitions"]
              verbs: ["get", "list"]
            - apiGroups: ["networking.k8s.io"]
              resources: ["networkpolicies"]
              verbs: ["*"]
            - apiGroups: [""]
              resources: ["persistentvolumeclaims", "persistentvolumes", "services", "secrets", "serviceaccounts", "configmaps"]
              verbs: ["*"]
            - apiGroups: ["apps"]
              resources: ["deployments"]
              verbs: ["*"]
            - apiGroups: ["rbac.authorization.k8s.io"]
              resources: ["role", "clusterrole"]
              verbs: ["get", "list"]
            - apiGroups: ["rbac.authorization.k8s.io"]
              resources: ["rolebindings", "clusterrolebindings"]
              verbs: ["*"]
            - apiGroups: ["storage.k8s.io"]
              resources: ["storageclasses"]
              verbs: ["get", "list"]
            - apiGroups: ["apiextensions.k8s.io"]
              resources: ["customresourcedefinitions"]
              verbs: ["get", "list"]
            - apiGroups: ["k8s.cni.cncf.io"]
              resources: ["network-attachment-definitions"]
              verbs: ["get", "list"]
            - apiGroups: ["kubevirt.io"]
              resources: ["virtualmachines", "virtualmachineinstances", "virtualmachineinstancemigrations"]
              verbs: ["*"]
            - apiGroups: ["subresources.kubevirt.io"]
              resources: ["*"]
              verbs: ["get", "list", "update", "patch"]
            - apiGroups: ["instancetype.kubevirt.io"]
              resources: ["*"]
              verbs: ["*"]
            - apiGroups: ["cdi.kubevirt.io"]
              resources: ["*"]
              verbs: ["*"]
            - apiGroups: ["pool.kubevirt.io"]
              resources: ["*"]
              verbs: ["*"]
            - apiGroups: ["scheduling.k8s.io"]
              resources: ["priorityclasses"]
              verbs: ["get", "list"]
            - apiGroups: ["autoscaling"]
              resources: ["horizontalpodautoscalers"]
              verbs: ["*"]
            - apiGroups: ["cluster.x-k8s.io"]
              resources: ["clusters", "machinedeployments"]
              verbs: ["*"]
            - apiGroups: ["controlplane.cluster.x-k8s.io"]
              resources: ["kubeadmcontrolplanes"]
              verbs: ["*"]
            - apiGroups: ["infrastructure.cluster.x-k8s.io"]
              resources: ["kubevirtmachinetemplates", "kubevirtclusters"]
              verbs: ["*"]
            - apiGroups: ["bootstrap.cluster.x-k8s.io"]
              resources: ["kubeadmconfigtemplates"]
              verbs: ["*"]
            - apiGroups: ["addons.cluster.x-k8s.io"]
              resources: ["clusterresourcesets"]
              verbs: ["*"]
            - apiGroups: ["kubevirt-manager.io"]
              resources: ["images"]
              verbs: ["*"]
        kccm:
          enabled: true
          type: ClusterRole
          rules:
            - apiGroups: ["kubevirt.io"]
              resources: ["virtualmachines"]
              verbs: ["get", "list", "watch"]
            - apiGroups: ["kubevirt.io"]
              resources: ["virtualmachineinstances"]
              verbs: ["get", "list", "watch", "update"]
            - apiGroups: [""]
              resources: ["pods"]
              verbs: ["get", "list", "watch"]
            - apiGroups: [""]
              resources: ["services"]
              verbs: ["*"]
        cas-workload:
          enabled: true
          type: ClusterRole
          rules:
            - apiGroups: [""]
              resources: ["namespaces", "persistentvolumeclaims", "persistentvolumes", "pods", "replicationcontrollers", "services", "secrets"]
              verbs: ["get", "list", "watch"]
            - apiGroups: [""]
              resources: ["nodes"]
              verbs: ["get", "list", "watch", "udate"]
            - apiGroups: [""]
              resources: ["pods/eviction"]
              verbs: ["create"]
            - apiGroups: ["policy"]
              resources: ["poddisruptionbudgets"]
              verbs: ["list", "watch"]
            - apiGroups: ["storage.k8s.io"]
              resources: ["csinodes", "storageclasses", "csidrivers", "csistoragecapacities"]
              verbs: ["get", "list", "watch"]
            - apiGroups: ["batch"]
              resources: ["jobs"]
              verbs: ["list", "watch"]
            - apiGroups: ["apps"]
              resources: ["daemonsets", "replicasets", "statefulsets"]
              verbs: ["list", "watch"]
            - apiGroups: [""]
              resources: ["events"]
              verbs: ["create", "patch"]
            - apiGroups: [""]
              resources: ["configmaps"]
              verbs: ["create", "delete", "get", "update"]
            - apiGroups: ["coordination.k8s.io"]
              resources: ["leases"]
              verbs: ["create", "get", "update"]
        cas-management:
          enabled: true
          type: ClusterRole
          rules:
            - apiGroups: ["cluster.x-k8s.io"]
              resources: ["machinedeployments", "machinedeployments/scale", "machines", "machinesets", "machinepools"]
              verbs: ["get", "list", "watch", "udate"]
            - apiGroups: ["infrastructure.cluster.x-k8s.io"]
              resources: ["kubevirtcluster", "kubevirtmachinetemplate", "kubevirtmachinetemplates"]
              verbs: ["get", "list", "watch", "udate"]
      bindings:
        kubevirt-manager:
          enabled: true
          type: ClusterRoleBinding
          roleRef:
            identifier: kubevirt-manager
          subjects:
            - identifier: default
        kccm:
          enabled: true
          type: ClusterRoleBinding
          roleRef:
            identifier: kccm
          subjects:
            - identifier: default
        cas-workload:
          enabled: true
          type: ClusterRoleBinding
          roleRef:
            identifier: cas-workload
          subjects:
            - identifier: default
        cas-management:
          enabled: true
          type: ClusterRoleBinding
          roleRef:
            identifier: cas-management
          subjects:
            - identifier: default
