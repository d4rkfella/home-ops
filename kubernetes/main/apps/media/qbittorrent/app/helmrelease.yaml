---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app qbittorrent
  annotations:
    kustomize.toolkit.fluxcd.io/substitute: disabled
spec:
  interval: 30m
  chart:
    spec:
      verify:
        provider: cosign
      chart: app-template
      version: 3.6.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  dependsOn:
    - name: volsync
      namespace: volsync-system

  values:
    controllers:
      '{{ .Release.Name }}':
        annotations:
          reloader.stakater.com/auto: "true"

        containers:
          app:
            image:
              repository: ghcr.io/onedr0p/qbittorrent
              tag: 5.0.3@sha256:19597e4a5c5e52702ff6b4ea5c4b5f9f42433d6c2f1ef1d2db5964938bf44557
            env:
              UMASK: "022"
              TZ: Europe/Sofia
              QBT_WEBUI_PORT: &port 80
              QBT_TORRENTING_PORT: &torrentPort 50413
              CROSS_SEED_ENABLED: true
              CROSS_SEED_URL: https://cross-seed.darkfellanetwork.com
              CROSS_SEED_SLEEP_INTERVAL: 15
              PUSHOVER_ENABLED: true
            probes:
              readiness: &probes
                enabled: true
                custom: true
                spec:
                  exec:
                    command:
                      - /scripts/healthcheck.sh
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  failureThreshold: 3
              liveness: *probes
              startup:
                enabled: true
                spec:
                  failureThreshold: 30
                  periodSeconds: 10
            securityContext: &securityContext
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 100m
              limits:
                memory: 16Gi

          git-sync:
            image:
              repository: registry.k8s.io/git-sync/git-sync
              tag: v4.4.0
            args:
              - --repo=https://github.com/WDaan/VueTorrent
              - --ref=latest-release
              - --period=86400s
              - --root=/addons
            securityContext: *securityContext
            resources:
              requests:
                cpu: 10m
                memory: 25Mi

    defaultPodOptions:
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
        runAsGroup: 2000
        fsGroup: 2000
        fsGroupChangePolicy: Always
        seccompProfile: { type: RuntimeDefault }

    service:
      app:
        controller: '{{ .Release.Name }}'
        primary: true
        ports:
          http:
            port: *port
      upload:
        controller: '{{ .Release.Name }}'
        primary: false
        type: LoadBalancer
        allocateLoadBalancerNodePorts: false
        annotations:
          lbipam.cilium.io/ips: 192.168.91.82
        ports:
          bittorrent-tcp:
            enabled: true
            port: *torrentPort
            protocol: TCP
          bittorrent-udp:
            enabled: true
            port: *torrentPort
            protocol: UDP

    ingress:
      app:
        annotations:
          nginx.ingress.kubernetes.io/configuration-snippet: |
            proxy_set_header Accept-Encoding "";
            sub_filter '</body>' '<link rel="stylesheet" type="text/css" href="https://theme-park.dev/css/base/vuetorrent/mind.css"></body>';
            sub_filter_once on;
          cert-manager.io/cluster-issuer: zerossl-prod
          cert-manager.io/private-key-rotation-policy: Always
          cert-manager.io/private-key-algorithm: ECDSA
          cert-manager.io/private-key-size: "384"
        className: internal
        tls:
          - hosts:
              - &host "{{ .Release.Name }}.darkfellanetwork.com"
            secretName: "{{ .Release.Name }}-tls"
        hosts:
          - host: *host
            paths:
              - path: /
                service:
                  identifier: app
                  port: http

    persistence:
      config:
        enabled: true
        type: persistentVolumeClaim
        size: 5Gi
        accessMode: ReadWriteOnce
        storageClass: openebs-zfs-128k
        advancedMounts:
          {{ .Release.Name }}:
            app:
              - path: /config

      scripts:
        type: configMap
        name: "{{ .Release.Name }}-scripts"
        defaultMode: 0550
        advancedMounts:
          {{ .Release.Name }}:
            app:
              - readOnly: true

      media:
        type: nfs
        server: 192.168.91.40
        path: /mnt/exos20/data
        advancedMounts:
          {{ .Release.Name }}:
            app:
              - path: /data/downloads/torrents
                subPath: downloads/torrents

      addons:
        type: emptyDir
        advancedMounts:
          {{ .Release.Name }}:
            app:
              - path: /addons
                readOnly: true
            git-sync:
              - path: /addons

      tmp:
        type: emptyDir
        advancedMounts:
          {{ .Release.Name }}:
            git-sync:
              - path: /tmp

    rawResources:
      secret:
        enabled: true
        apiVersion: external-secrets.io/v1beta1
        kind: ExternalSecret
        spec:
          spec:
            secretStoreRef:
              kind: ClusterSecretStore
              name: vault-backend
            target:
              name: "{{ .Release.Name }}-secret"
            data:
              - secretKey: CROSS_SEED_API_KEY
                remoteRef:
                  key: secrets/cross-seed
                  property: API_KEY
              - secretKey: &key PUSHOVER_USER_KEY
                remoteRef:
                  key: secrets/pushover
                  property: *key
              - secretKey: PUSHOVER_TOKEN
                remoteRef:
                  key: secrets/pushover
                  property: QBITTORRENT_PUSHOVER_TOKEN
      volsync-secret:
        enabled: true
        apiVersion: external-secrets.io/v1beta1
        kind: ExternalSecret
        spec:
          spec:
            secretStoreRef:
              kind: ClusterSecretStore
              name: vault-backend
            target:
              name: &volsync-secret "{{ .Release.Name }}-volsync-secret"
            dataFrom:
              - extract:
                  key: secrets/volsync/qbittorrent

      volsync-src:
        enabled: true
        apiVersion: volsync.backube/v1alpha1
        kind: ReplicationSource
        spec:
          spec:
            sourcePVC: &volsync-pvc "{{ .Release.Name }}-config"
            trigger:
              schedule: "0 7 * * *"
            restic:
              copyMethod: Clone
              storageClassName: openebs-zfs-128k
              pruneIntervalDays: 7
              repository: *volsync-secret
              cacheCapacity: 2Gi
              moverSecurityContext: &moverSecurityContext
                runAsUser: 2000
                runAsGroup: 2000
                fsGroup: 2000
              retain:
                daily: 7
                within: 3d

      volsync-dst:
        enabled: false
        apiVersion: volsync.backube/v1alpha1
        kind: ReplicationDestination
        spec:
          spec:
            trigger:
              manual: restore-once
            restic:
              repository: *volsync-secret
              destinationPVC: *volsync-pvc
              copyMethod: Direct
              enableFileDeletion: true
              moverSecurityContext: *moverSecurityContext

    configMaps:
      scripts:
        enabled: true
        data:
          post-process.sh: |
            #!/usr/bin/env bash
            # shellcheck disable=SC2154

            set -euo pipefail

            # User-defined variables
            CROSS_SEED_ENABLED="${CROSS_SEED_ENABLED:-false}"
            CROSS_SEED_URL="${CROSS_SEED_URL:-required}"
            CROSS_SEED_API_KEY="${CROSS_SEED_API_KEY:-required}"
            CROSS_SEED_SLEEP_INTERVAL="${CROSS_SEED_SLEEP_INTERVAL:-30}"
            PUSHOVER_ENABLED="${PUSHOVER_ENABLED:-false}"
            PUSHOVER_USER_KEY="${PUSHOVER_USER_KEY:-required}"
            PUSHOVER_TOKEN="${PUSHOVER_TOKEN:-required}"

            # Function to set release variables from qBittorrent
            set_qb_vars() {
                RELEASE_NAME="$1"      # %N
                RELEASE_INFOHASH="$2"  # %I
                RELEASE_CAT="$3"       # %L
                RELEASE_SIZE="$4"      # %Z
                RELEASE_INDEXER="$5"   # %T
                RELEASE_TYPE="Torrent"
            }

            # Function to send pushover notification
            send_pushover_notification() {
                local pushover_message status_code json_data
                printf -v pushover_message \
                    "<b>%s</b><small>\n<b>Category:</b> %s</small><small>\n<b>Indexer:</b> %s</small><small>\n<b>Size:</b> %s</small>" \
                        "${RELEASE_NAME%.*}" \
                        "${RELEASE_CAT}" \
                        "$(trurl --url "${RELEASE_INDEXER}" --get '{idn:host}')" \
                        "$(numfmt --to iec --format "%8.2f" "${RELEASE_SIZE}")"

                json_data=$(jo \
                    token="${PUSHOVER_TOKEN}" \
                    user="${PUSHOVER_USER_KEY}" \
                    title="${RELEASE_TYPE} Downloaded" \
                    message="${pushover_message}" \
                    priority="-2" \
                    html="1"
                )

                status_code=$(curl \
                    --silent \
                    --write-out "%{http_code}" \
                    --output /dev/null \
                    --request POST  \
                    --header "Content-Type: application/json" \
                    --data-binary "${json_data}" \
                    "https://api.pushover.net/1/messages.json"
                )

                printf "pushover notification returned with HTTP status code %s and payload: %s\n" \
                    "${status_code}" \
                    "$(echo "${json_data}" | jq --compact-output)" >&2
            }

            # Function to search for cross-seed
            search_cross_seed() {
                local status_code
                status_code=$(curl \
                    --silent \
                    --output /dev/null \
                    --write-out "%{http_code}" \
                    --request POST \
                    --data-urlencode "infoHash=${RELEASE_INFOHASH}" \
                    --data-urlencode "includeSingleEpisodes=true" \
                    --header "X-Api-Key: ${CROSS_SEED_API_KEY}" \
                    "${CROSS_SEED_URL}/api/webhook"
                )

                printf "cross-seed search returned with HTTP status code %s and path %s\n" \
                    "${status_code}" \
                    "${RELEASE_NAME}" >&2

                sleep "${CROSS_SEED_SLEEP_INTERVAL}"
            }

            main() {
                    set_qb_vars "$@"

                # Send pushover notification
                if [[ "${PUSHOVER_ENABLED}" == "true" ]]; then
                    send_pushover_notification
                fi

                # Search for cross-seed
                if [[ "${CROSS_SEED_ENABLED}" == "true" ]]; then
                    search_cross_seed
                fi
            }

            main "$@"
          healthcheck.sh: |
            #!/bin/bash

            http_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:80/api/v2/app/version)
            if [[ $http_code != 200 ]]; then
                log "App status: not up yet, did you enable \"Bypass authentication for clients on localhost\" in the Web UI options?"
                exit 1
            else
                log "App status: up and running"
            fi

            exit 0
      gatus-ep:
        enabled: true
        labels:
          gatus.io/enabled: "true"
        data:
          config.yaml: |
            endpoints:
              - name: "qBittorrent"
                group: guarded
                url: "https://qbittorrent.darkfellanetwork.com/api/v2/app/version"
                interval: 1m
                ui:
                  hide-hostname: true
                  hide-url: true
                client:
                  dns-resolver: tcp://172.17.0.10:53
                conditions:
                  - "[STATUS] == 403"
                alerts:
                  - type: pushover

      loki-rules:
        enabled: true
        labels:
          loki_rule: "true"
        data:
          qbittorrent.yaml: |
            groups:
              - name: qbittorrent
                rules:
                  - alert: QbittorrentFastResumeRejected
                    expr: |
                      sum by (app) (count_over_time({app="qbittorrent"} |~ "(?i)fast resume rejected"[1h])) > 0
                    for: 2m
                    labels:
                      severity: critical
                      category: logs
                    annotations:
                      app: "{{ "{{ $labels.container }}" }}"
                      summary: "{{ "{{ $labels.container }} has a torrent with fast resume rejected" }}"
