---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app radarr
  annotations:
    kustomize.toolkit.fluxcd.io/substitute: disabled
spec:
  interval: 30m
  chart:
    spec:
      verify:
        provider: cosign
      chart: app-template
      version: 3.6.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3

  values:
    controllers:
      radarr:
        annotations:
          reloader.stakater.com/auto: "true"

        initContainers:
          init-db:
            image:
              repository: ghcr.io/buroa/postgres-init
              tag: 17.2@sha256:92f971d2d9ebe4b060b4bc44dfb13e0baaf68489184b742fae42cc83c7a78c0c
            env:
              INIT_POSTGRES_DBNAME: &dbName radarr
              INIT_POSTGRES_HOST: &dbHost postgres17-rw.database.svc.cluster.local
              INIT_POSTGRES_USER:
                valueFrom:
                  secretKeyRef:
                    name: &secret "{{ .Release.Name }}-secret"
                    key: POSTGRES_USER
              INIT_POSTGRES_PASS:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: POSTGRES_PASS
              INIT_POSTGRES_SUPER_PASS:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: POSTGRES_SUPER_PASS
            securityContext: &securityContext
              runAsUser: 65534
              runAsGroup: 65534
              privileged: false
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }

        containers:
          oauth2-proxy:
            image:
              repository: quay.io/oauth2-proxy/oauth2-proxy
              tag: v7.8.1-amd64@sha256:543e19accc96055a00f42ed93525ae04008bea3d7debe1d912096f8f20978033
            args:
              - --config=/etc/oauth2-proxy.cfg
            env:
              OAUTH2_PROXY_CLIENT_ID:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: CLIENT_ID
              OAUTH2_PROXY_CLIENT_SECRET:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: CLIENT_SECRET
              OAUTH2_PROXY_COOKIE_SECRET:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: COOKIE_SECRET
              OAUTH2_PROXY_REDIS_PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: DRAGONFLY_PASSWORD
            securityContext: *securityContext

          app:
            image:
              repository: ghcr.io/onedr0p/radarr-develop
              tag: 5.18.1.9612@sha256:64364aa80c8e7bb1350c77a0400dcf7da298cf06c44c84081937955bbbd01e4c
            env:
              TZ: Europe/Sofia
              RADARR__APP__INSTANCENAME: Radarr
              RADARR__APP__THEME: dark
              RADARR__AUTH__METHOD: External
              RADARR__AUTH__REQUIRED: DisabledForLocalAddresses
              RADARR__LOG__DBENABLED: "False"
              RADARR__LOG__LEVEL: info
              RADARR__SERVER__PORT: &port 80
              RADARR__SERVER__BINDADDRESS: 127.0.0.1
              RADARR__UPDATE__BRANCH: develop
              RADARR__AUTH__APIKEY:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: APIKEY
              RADARR__POSTGRES__HOST: *dbHost
              RADARR__POSTGRES__PORT: 5432
              RADARR__POSTGRES__USER:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: POSTGRES_USER
              RADARR__POSTGRES__PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: POSTGRES_PASS
              RADARR__POSTGRES__MAINDB: *dbName
              PUSHOVER_USER_KEY:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: PUSHOVER_USER_KEY
              PUSHOVER_TOKEN:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: PUSHOVER_TOKEN
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: 4180
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 100m
                memory: 512Mi
              limits:
                memory: 4Gi

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
        runAsGroup: 2000
        fsGroup: 2000
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }

    service:
      app:
        controller: *app
        ports:
          http:
            port: 4180

    ingress:
      app:
        annotations:
          nginx.ingress.kubernetes.io/configuration-snippet: |
            proxy_set_header Accept-Encoding "";
            sub_filter '</body>' '<link rel="stylesheet" type="text/css" href="https://theme-park.dev/css/base/radarr/mind.css"></body>';
            sub_filter_once on;
          cert-manager.io/cluster-issuer: zerossl-prod
          cert-manager.io/private-key-rotation-policy: Always
          cert-manager.io/private-key-algorithm: ECDSA
          cert-manager.io/private-key-size: "384"
        className: internal
        tls:
          - hosts:
              - &host "{{ .Release.Name }}.darkfellanetwork.com"
            secretName: radarr-tls
        hosts:
          - host: *host
            paths:
              - path: /
                service:
                  identifier: app
                  port: 4180

    persistence:
      config:
        enabled: true
        type: persistentVolumeClaim
        size: 15Gi
        accessMode: ReadWriteOnce
        storageClass: openebs-zfs-128k
        advancedMounts:
          radarr:
            app:
              - path: /config

      scripts:
        type: configMap
        name: radarr-scripts
        defaultMode: 0550
        advancedMounts:
          radarr:
            app:
              - path: /scripts/pushover-notify.sh
                subPath: pushover-notify.sh
                readOnly: true

      tmp:
        type: emptyDir
        advancedMounts:
          radarr:
            app:
              - path: /tmp

      media:
        type: nfs
        server: 192.168.91.40
        path: /mnt/exos20/data
        advancedMounts:
          radarr:
            app:
              - path: /data

      oauth2-proxy-config:
        type: configMap
        name: radarr-oauth2-proxy-config
        advancedMounts:
          radarr:
            oauth2-proxy:
              - path: /etc/oauth2-proxy.cfg
                subPath: oauth2-proxy.cfg
                readOnly: true

      darkfellanet-root-ca:
        type: secret
        name: *secret
        advancedMounts:
          radarr:
            oauth2-proxy:
              - path: /etc/ssl/certs/darkfellanet-root-ca.crt
                subPath: darkfellanet-root-ca.crt
                readOnly: true

    rawResources:
      secret:
        enabled: true
        apiVersion: external-secrets.io/v1beta1
        kind: ExternalSecret
        spec:
          spec:
            secretStoreRef:
              kind: ClusterSecretStore
              name: vault-backend
            target:
              name: "{{ .Release.Name }}-secret"
              template:
                engineVersion: v2
                data:
                  APIKEY: '{{ "{{ .RADARR_API_KEY }}" }}'
                  PUSHOVER_TOKEN: '{{ "{{ .RADARR_PUSHOVER_TOKEN }}" }}'
                  PUSHOVER_USER_KEY: '{{ "{{ .PUSHOVER_USER_KEY }}" }}'
                  POSTGRES_USER: '{{ "{{ .RADARR_POSTGRES_USER }}" }}'
                  POSTGRES_PASS: '{{ "{{ .RADARR_POSTGRES_PASS }}" }}'
                  POSTGRES_SUPER_PASS: '{{ "{{ .POSTGRES_SUPER_PASS }}" }}'
                  COOKIE_SECRET: '{{ "{{ .COOKIE_SECRET }}" }}'
                  CLIENT_SECRET: '{{ "{{ .CLIENT_SECRET}}" }}'
                  CLIENT_ID: '{{ "{{ .CLIENT_ID }}" }}'
                  DRAGONFLY_PASSWORD: '{{ "{{ .DRAGONFLY__PASSWORD }}" }}'
                  darkfellanet-root-ca.crt: '{{ "{{ index . \"darkfellanet-root-ca.crt\" }}" }}'
            dataFrom:
              - extract:
                  key: secrets/cloudnative-pg
              - extract:
                  key: secrets/pushover
              - extract:
                  key: secrets/api-keys
              - extract:
                  key: secrets/oauth2/radarr
              - extract:
                  key: secrets/dragonfly
            data:
              - secretKey: darkfellanet-root-ca.crt
                remoteRef:
                  key: secrets/certificates/darkfellanet-internal
                  property: ca.crt

    configMaps:
      gatus-ep:
        enabled: true
        labels:
          gatus.io/enabled: "true"
        data:
          config.yaml: |
            endpoints:
              - name: "Radarr"
                group: guarded
                url: "https://radarr.darkfellanetwork.com/ping"
                interval: 1m
                ui:
                  hide-hostname: true
                  hide-url: true
                client:
                  dns-resolver: tcp://172.17.0.10:53
                conditions:
                  - "[STATUS] == 200"
                  - "[BODY].status == OK"
                alerts:
                  - type: pushover
      oauth2-proxy-config:
        enabled: true
        data:
          oauth2-proxy.cfg: |
            email_domains = [ "*" ]
            upstreams = [ "http://127.0.0.1:80" ]
            reverse_proxy = true
            scope = "openid profile email"
            cookie_secure = true
            provider = "keycloak-oidc"
            oidc_issuer_url = "https://accounts.darkfellanetwork.com/realms/DarkfellaNET"
            code_challenge_method = "S256"
            cookie_domains = "radarr.darkfellanetwork.com"
            whitelist_domains = "radarr.darkfellanetwork.com"
            backend_logout_url = "https://accounts.darkfellanetwork.com/realms/DarkfellaNET/protocol/openid-connect/logout?id_token_hint={id_token}"
            skip_provider_button = true
            cookie_expire = "30m"
            cookie_refresh = "4m55s"
            allowed_groups = [ "Admins" ]
            redirect_url = "https://radarr.darkfellanetwork.com/oauth2/callback"
            cookie_name = "__Secure-oauth2_proxy"
            skip_auth_routes = [ "^/api(/|$)", "^/ping", "^/signalr(/|$)" ]
            http_address = "0.0.0.0:4180"
            cookie_csrf_per_request = true
            cookie_csrf_expire = "5m"
            ping_path = "/oauth2/ping"
            ready_path = "/oauth2/ready"
            cookie_samesite = "strict"
            session_store_type = "redis"
            redis_connection_url = "rediss://dragonfly-cluster.database.svc.cluster.local:6379"
      scripts:
        enabled: true
        data:
          pushover-notify.sh: |
            #!/usr/bin/env bash
            # shellcheck disable=SC2154
            set -euo pipefail

            # User defined variables for pushover
            PUSHOVER_USER_KEY="${PUSHOVER_USER_KEY:-required}"
            PUSHOVER_TOKEN="${PUSHOVER_TOKEN:-required}"
            PUSHOVER_PRIORITY="${PUSHOVER_PRIORITY:-"-2"}"

            if [[ "${radarr_eventtype:-}" == "Test" ]]; then
                PUSHOVER_PRIORITY="1"
                printf -v PUSHOVER_TITLE \
                    "Test Notification"
                printf -v PUSHOVER_MESSAGE \
                    "Howdy this is a test notification from %s" \
                        "${radarr_instancename:-Radarr}"
                printf -v PUSHOVER_URL \
                    "%s" \
                        "${radarr_applicationurl:-localhost}"
                printf -v PUSHOVER_URL_TITLE \
                    "Open %s" \
                        "${radarr_instancename:-Radarr}"
            fi

            if [[ "${radarr_eventtype:-}" == "Download" ]]; then
                printf -v PUSHOVER_TITLE \
                    "Movie %s" \
                        "$( [[ "${radarr_isupgrade}" == "True" ]] && echo "Upgraded" || echo "Downloaded" )"
                printf -v PUSHOVER_MESSAGE \
                    "<b>%s (%s)</b><small>\n%s</small><small>\n\n<b>Client:</b> %s</small><small>\n<b>Quality:</b> %s</small><small>\n<b>Size:</b> %s</small>" \
                        "${radarr_movie_title}" \
                        "${radarr_movie_year}" \
                        "${radarr_movie_overview}" \
                        "${radarr_download_client:-Unknown}" \
                        "${radarr_moviefile_quality:-Unknown}" \
                        "$(numfmt --to iec --format "%8.2f" "${radarr_release_size:-0}")"
                printf -v PUSHOVER_URL \
                    "%s/movie/%s" \
                        "${radarr_applicationurl:-localhost}" "${radarr_movie_tmdbid}"
                printf -v PUSHOVER_URL_TITLE \
                    "View movie in %s" \
                        "${radarr_instancename:-Radarr}"
            fi

            if [[ "${radarr_eventtype:-}" == "ManualInteractionRequired" ]]; then
                PUSHOVER_PRIORITY="1"
                printf -v PUSHOVER_TITLE \
                    "Movie import requires intervention"
                printf -v PUSHOVER_MESSAGE \
                    "<b>%s (%s)</b><small>\n<b>Client:</b> %s</small>" \
                        "${radarr_movie_title}" \
                        "${radarr_movie_year}" \
                        "${radarr_download_client:-Unknown}"
                printf -v PUSHOVER_URL \
                    "%s/activity/queue" \
                        "${radarr_applicationurl:-localhost}"
                printf -v PUSHOVER_URL_TITLE \
                    "View queue in %s" \
                        "${radarr_instancename:-Radarr}"
            fi

            json_data=$(jo \
                token="${PUSHOVER_TOKEN}" \
                user="${PUSHOVER_USER_KEY}" \
                title="${PUSHOVER_TITLE}" \
                message="${PUSHOVER_MESSAGE}" \
                url="${PUSHOVER_URL}" \
                url_title="${PUSHOVER_URL_TITLE}" \
                priority="${PUSHOVER_PRIORITY}" \
                html="1"
            )

            status_code=$(curl \
                --silent \
                --write-out "%{http_code}" \
                --output /dev/null \
                --request POST  \
                --header "Content-Type: application/json" \
                --data-binary "${json_data}" \
                "https://api.pushover.net/1/messages.json" \
            )

            printf "pushover notification returned with HTTP status code %s and payload: %s\n" \
                "${status_code}" \
                "$(echo "${json_data}" | jq --compact-output)" >&2
