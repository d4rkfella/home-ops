---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app sonarr
  annotations:
    kustomize.toolkit.fluxcd.io/substitute: disabled
spec:
  interval: 30m
  chart:
    spec:
      verify:
        provider: cosign
      chart: app-template
      version: 3.6.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3

  values:
    controllers:
      sonarr:
        annotations:
          reloader.stakater.com/auto: "true"

        initContainers:
          init-db:
            image:
              repository: ghcr.io/buroa/postgres-init
              tag: 17.2@sha256:92f971d2d9ebe4b060b4bc44dfb13e0baaf68489184b742fae42cc83c7a78c0c
            env:
              INIT_POSTGRES_DBNAME: &dbName sonarr
              INIT_POSTGRES_HOST: &dbHost postgres17-rw.database.svc.cluster.local
              INIT_POSTGRES_USER:
                valueFrom:
                  secretKeyRef:
                    name: &secret "{{ .Release.Name }}-secret"
                    key: POSTGRES_USERNAME
              INIT_POSTGRES_PASS:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: POSTGRES_PASSWORD
              INIT_POSTGRES_SUPER_PASS:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: POSTGRES_SUPER_PASS
            securityContext: &securityContext
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }

        containers:
          oauth2-proxy:
            image:
              repository: quay.io/oauth2-proxy/oauth2-proxy
              tag: v7.8.1-amd64@sha256:543e19accc96055a00f42ed93525ae04008bea3d7debe1d912096f8f20978033
            args:
              - --config=/etc/oauth2-proxy.cfg
            securityContext: *securityContext

          app:
            image:
              repository: ghcr.io/onedr0p/sonarr-develop
              tag: 4.0.12.2866@sha256:8690925866b385cbce810ae83151b0151fc3fe3579c21cd8410f081ff140c798
            env:
              TZ: Europe/Sofia
              SONARR__APP__INSTANCENAME: Sonarr
              SONARR__APP__THEME: dark
              SONARR__AUTH__METHOD: External
              SONARR__AUTH__REQUIRED: DisabledForLocalAddresses
              SONARR__LOG__DBENABLED: "False"
              SONARR__LOG__LEVEL: info
              SONARR__SERVER__PORT: 80
              SONARR__SERVER__BINDADDRESS  : 127.0.0.1
              SONARR__UPDATE__BRANCH: develop
              SONARR__AUTH__APIKEY:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: SONARR_API_KEY
              SONARR__POSTGRES__HOST: *dbHost
              SONARR__POSTGRES__MAINDB: *dbName
              SONARR__POSTGRES__USER:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: POSTGRES_USERNAME
              SONARR__POSTGRES__PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: POSTGRES_PASSWORD
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: 4180
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 100m
                memory: 512Mi
              limits:
                memory: 4Gi

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
        runAsGroup: 2000
        fsGroup: 2000
        fsGroupChangePolicy: Always
        seccompProfile: { type: RuntimeDefault }

    service:
      app:
        controller: *app
        ports:
          http:
            port: 4180

    ingress:
      app:
        annotations:
          nginx.ingress.kubernetes.io/configuration-snippet: |
            proxy_set_header Accept-Encoding "";
            sub_filter '</body>' '<link rel="stylesheet" type="text/css" href="https://theme-park.dev/css/base/sonarr/mind.css"></body>';
            sub_filter_once on;
          cert-manager.io/cluster-issuer: zerossl-prod
          cert-manager.io/private-key-rotation-policy: Always
          cert-manager.io/private-key-algorithm: ECDSA
          cert-manager.io/private-key-size: "384"
        className: internal
        tls:
          - hosts:
              - &host "{{ .Release.Name }}.darkfellanetwork.com"
            secretName: "{{ .Release.Name }}-tls"
        hosts:
          - host: *host
            paths:
              - path: /
                service:
                  identifier: app
                  port: http

    persistence:
      config:
        enabled: true
        type: persistentVolumeClaim
        size: 15Gi
        storageClass: openebs-zfs-128k
        accessMode: ReadWriteOnce
        advancedMounts:
          sonarr:
            app:
              - path: /config

      scripts:
        type: configMap
        name: "{{ .Release.Name }}-scripts"
        defaultMode: 0550
        advancedMounts:
          sonarr:
            app:
              - path: /scripts/refresh-series.sh
                subPath: refresh-series.sh
                readOnly: true

      media:
        type: nfs
        server: 192.168.91.40
        path: /mnt/exos20/data
        advancedMounts:
          sonarr:
            app:
              - path: /data

      oauth2-proxy-config:
        type: secret
        name: *secret
        defaultMode: 0440
        advancedMounts:
          sonarr:
            oauth2-proxy:
              - path: /etc/oauth2-proxy.cfg
                subPath: oauth2-proxy.cfg
                readOnly: true

      darkfellanet-root-ca:
        type: secret
        name: *secret
        defaultMode: 0440
        advancedMounts:
          sonarr:
            oauth2-proxy:
              - path: /etc/ssl/certs/darkfellanet-root-ca.crt
                subPath: ca.crt
                readOnly: true

    rawResources:
      secret:
        enabled: true
        apiVersion: external-secrets.io/v1beta1
        kind: ExternalSecret
        spec:
          spec:
            secretStoreRef:
              kind: ClusterSecretStore
              name: vault-backend
            target:
              name: "{{ .Release.Name }}-secret"
              template:
                engineVersion: v2
                templateFrom:
                  - configMap:
                      name: "{{ .Release.Name }}-configmap"
                      items:
                        - key: oauth2-proxy.cfg
                        - key: POSTGRES_SUPER_PASS
                        - key: POSTGRES_USERNAME
                        - key: POSTGRES_PASSWORD
                        - key: DRAGONFLY_PASSWORD
            dataFrom:
              - extract:
                  key: secrets/sonarr
            data:
              - secretKey: DRAGONFLY_PASSWORD
                remoteRef:
                  key: /secrets/dragonfly
              - secretKey: POSTGRES_SUPER_PASS
                remoteRef:
                  key: /secrets/cloudnative-pg
              - secretKey: POSTGRES_USERNAME
                remoteRef:
                  key: /secrets/sonarr
              - secretKey: POSTGRES_PASSWORD
                remoteRef:
                  key: /secrets/sonarr
              - secretKey: CA
                remoteRef:
                  key: /secrets/darkfellanet-internal
    configMaps:
      gatus-ep:
        enabled: true
        labels:
          gatus.io/enabled: "true"
        data:
          config.yaml: |
            endpoints:
              - name: "Sonarr"
                group: guarded
                url: "https://sonarr.darkfellanetwork.com/ping"
                interval: 1m
                ui:
                  hide-hostname: true
                  hide-url: true
                client:
                  dns-resolver: tcp://172.17.0.10:53
                conditions:
                  - "[STATUS] == 200"
                  - "[BODY].status == OK"
                alerts:
                  - type: pushover
      scripts:
        enabled: true
        data:
          refresh-series.sh: |
            #!/usr/bin/env bash
            # shellcheck disable=SC2154
            set -euo pipefail

            CURL_CMD=(curl -fsSL --header "X-Api-Key: ${SONARR__AUTH__APIKEY:-}")
            SONARR_API_URL="http://localhost:${SONARR__SERVER__PORT:-}/api/v3"

            if [[ "${sonarr_eventtype:-}" == "Grab" ]]; then
                tba=$("${CURL_CMD[@]}" "${SONARR_API_URL}/episode?seriesId=${sonarr_series_id:-}" | jq --raw-output '
                    [.[] | select((.title == "TBA") or (.title == "TBD"))] | length
                ')

                if (( tba > 0 )); then
                    echo "INFO: Refreshing series ${sonarr_series_id:-} due to TBA/TBD episodes found"
                    "${CURL_CMD[@]}" \
                        --request POST \
                        --header "Content-Type: application/json" \
                        --data-binary '{"name": "RefreshSeries", "seriesId": '"${sonarr_series_id:-}"'}' \
                        "${SONARR_API_URL}/command" &>/dev/null
                fi
            fi
