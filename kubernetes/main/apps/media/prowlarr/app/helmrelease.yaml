---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app prowlarr
  annotations:
    kustomize.toolkit.fluxcd.io/substitute: disabled
spec:
  interval: 30m
  chart:
    spec:
      verify:
        provider: cosign
      chart: app-template
      version: 3.6.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3

  values:
    controllers:
      prowlarr:
        annotations:
          reloader.stakater.com/auto: "true"

        initContainers:
          init-db:
            image:
              repository: ghcr.io/buroa/postgres-init
              tag: 17.2@sha256:92f971d2d9ebe4b060b4bc44dfb13e0baaf68489184b742fae42cc83c7a78c0c
            env:
              INIT_POSTGRES_DBNAME: &dbName prowlarr
              INIT_POSTGRES_HOST: &dbHost postgres17-rw.database.svc.cluster.local
              INIT_POSTGRES_USER:
                valueFrom:
                  secretKeyRef:
                    name: &secret prowlarr-secret
                    key: POSTGRES_USER
              INIT_POSTGRES_PASS:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: POSTGRES_PASS
              INIT_POSTGRES_SUPER_PASS:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: POSTGRES_SUPER_PASS
            securityContext: &securityContext
              runAsUser: 65534
              runAsGroup: 65534
              privileged: false
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }

        containers:
          oauth2-proxy:
            image:
              repository: quay.io/oauth2-proxy/oauth2-proxy
              tag: v7.8.1-amd64@sha256:543e19accc96055a00f42ed93525ae04008bea3d7debe1d912096f8f20978033
            args:
              - --config=/etc/oauth2-proxy.cfg
            env:
              OAUTH2_PROXY_CLIENT_ID:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: CLIENT_ID
              OAUTH2_PROXY_CLIENT_SECRET:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: CLIENT_SECRET
              OAUTH2_PROXY_COOKIE_SECRET:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: COOKIE_SECRET
              OAUTH2_PROXY_REDIS_PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: DRAGONFLY_PASSWORD
            securityContext: *securityContext

          app:
            image:
              repository: ghcr.io/onedr0p/prowlarr-develop
              tag: 1.30.1.4928@sha256:2af5238401dcfc7d885e90a9f71d72b79e7cfda47dbf9d125983ad62a4f9e1e3
            env:
              TZ: Europe/Sofia
              PROWLARR__APP__INSTANCENAME: Prowlarr
              PROWLARR__APP__THEME: dark
              PROWLARR__AUTH__METHOD: External
              PROWLARR__AUTH__REQUIRED: DisabledForLocalAddresses
              PROWLARR__LOG__DBENABLED: "False"
              PROWLARR__LOG__LEVEL: info
              PROWLARR__SERVER__BINDADDRESS  : 127.0.0.1
              PROWLARR__SERVER__PORT: 80
              PROWLARR__UPDATE__BRANCH: develop
              PROWLARR__AUTH__APIKEY:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: APIKEY
              PROWLARR__POSTGRES__HOST: *dbHost
              PROWLARR__POSTGRES__PORT: "5432"
              PROWLARR__POSTGRES__USER:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: POSTGRES_USER
              PROWLARR__POSTGRES__PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: POSTGRES_PASS
              PROWLARR__POSTGRES__MAINDB: *dbName
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: 4180
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 100m
              limits:
                memory: 1Gi

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
        runAsGroup: 2000
        fsGroup: 2000
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }

    service:
      app:
        controller: *app
        ports:
          http:
            port: 4180

    ingress:
      app:
        annotations:
          nginx.ingress.kubernetes.io/configuration-snippet: |
            proxy_set_header Accept-Encoding "";
            sub_filter '</body>' '<link rel="stylesheet" type="text/css" href="https://theme-park.dev/css/base/prowlarr/mind.css"></body>';
            sub_filter_once on;
          cert-manager.io/cluster-issuer: zerossl-prod
          cert-manager.io/private-key-rotation-policy: Always
          cert-manager.io/private-key-algorithm: ECDSA
          cert-manager.io/private-key-size: "384"
        className: internal
        tls:
          - hosts:
              - &host "{{ .Release.Name }}.darkfellanetwork.com"
            secretName: prowlarr-tls
        hosts:
          - host: *host
            paths:
              - path: /
                service:
                  identifier: app
                  port: http

    persistence:
      config:
        type: emptyDir
        advancedMounts:
          prowlarr:
            app:
              - path: /config

      tmp:
        type: emptyDir
        advancedMounts:
          prowlarr:
            app:
              - path: /tmp

      oauth2-proxy-config:
        type: configMap
        name: prowlarr-oauth2-proxy-config
        advancedMounts:
          prowlarr:
            oauth2-proxy:
              - path: /etc/oauth2-proxy.cfg
                subPath: oauth2-proxy.cfg
                readOnly: true

      darkfellanet-root-ca:
        type: secret
        name: *secret
        advancedMounts:
          prowlarr:
            oauth2-proxy:
              - path: /etc/ssl/certs/darkfellanet-root-ca.crt
                subPath: darkfellanet-root-ca.crt
                readOnly: true

    rawResources:
      secret:
        enabled: true
        apiVersion: external-secrets.io/v1beta1
        kind: ExternalSecret
        spec:
          spec:
            secretStoreRef:
              kind: ClusterSecretStore
              name: vault-backend
            target:
              name: *secret
              template:
                engineVersion: v2
                data:
                  APIKEY: '{{ "{{ .PROWLARR_API_KEY }}" }}'
                  POSTGRES_USER: '{{ "{{ .PROWLARR_POSTGRES_USER }}" }}'
                  POSTGRES_PASS: '{{ "{{ .PROWLARR_POSTGRES_PASS }}" }}'
                  POSTGRES_SUPER_PASS: '{{ "{{ .POSTGRES_SUPER_PASS }}" }}'
                  COOKIE_SECRET: '{{ "{{ .COOKIE_SECRET }}" }}'
                  CLIENT_SECRET: '{{ "{{ .CLIENT_SECRET}}" }}'
                  CLIENT_ID: '{{ "{{ .CLIENT_ID }}" }}'
                  DRAGONFLY_PASSWORD: '{{ "{{ .DRAGONFLY__PASSWORD }}" }}'
                  darkfellanet-root-ca.crt: '{{ "{{ index . \"darkfellanet-root-ca.crt\" }}" }}'
            dataFrom:
              - extract:
                  key: secrets/api-keys
              - extract:
                  key: secrets/cloudnative-pg
              - extract:
                  key: secrets/oauth2/prowlarr
              - extract:
                  key: secrets/dragonfly
            data:
              - secretKey: darkfellanet-root-ca.crt
                remoteRef:
                  key: secrets/certificates/darkfellanet-internal
                  property: ca.crt

    configMaps:
      gatus-ep:
        enabled: true
        labels:
          gatus.io/enabled: "true"
        data:
          config.yaml: |
            endpoints:
              - name: "Prowlarr"
                group: guarded
                url: "https://prowlarr.darkfellanetwork.com/ping"
                interval: 1m
                ui:
                  hide-hostname: true
                  hide-url: true
                client:
                  dns-resolver: tcp://172.17.0.10:53
                conditions:
                  - "[STATUS] == 200"
                  - "[BODY].status == OK"
                alerts:
                  - type: pushover
      oauth2-proxy-config:
        enabled: true
        data:
          oauth2-proxy.cfg: |
            email_domains = [ "*" ]
            upstreams = [ "http://127.0.0.1:80" ]
            reverse_proxy = true
            scope = "openid profile email"
            cookie_secure = true
            provider = "keycloak-oidc"
            oidc_issuer_url = "https://accounts.darkfellanetwork.com/realms/DarkfellaNET"
            code_challenge_method = "S256"
            cookie_domains = "prowlarr.darkfellanetwork.com"
            whitelist_domains = "prowlarr.darkfellanetwork.com"
            backend_logout_url = "https://accounts.darkfellanetwork.com/realms/DarkfellaNET/protocol/openid-connect/logout?id_token_hint={id_token}"
            skip_provider_button = true
            cookie_expire = "30m"
            cookie_refresh = "4m55s"
            allowed_groups = [ "Admins" ]
            redirect_url = "https://prowlarr.darkfellanetwork.com/oauth2/callback"
            cookie_name = "__Secure-oauth2_proxy"
            http_address = "0.0.0.0:4180"
            cookie_csrf_per_request = true
            cookie_csrf_expire = "5m"
            skip_auth_routes = [ "(\\/|\\/([0-9]+)\\/)?api(\\/|$|[?])", "(\\/|\\/([0-9]+)\\/)?download(\\/|$|[?])", "^/ping", "^/signalr(/|$)" ]
            ping_path = "/oauth2/ping"
            ready_path = "/oauth2/ready"
            cookie_samesite = "strict"
            session_store_type = "redis"
            redis_connection_url = "rediss://dragonfly-cluster.database.svc.cluster.local:6379"
