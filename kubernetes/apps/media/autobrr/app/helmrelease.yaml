---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app autobrr
  annotations:
    kustomize.toolkit.fluxcd.io/substitute: disabled
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    controllers:
      autobrr:
        annotations:
          reloader.stakater.com/auto: "true"

        initContainers:
          init-db:
            image:
              repository: ghcr.io/d4rkfella/postgres-init
              tag: 1.0.0@sha256:14abd08c1f0973d7da6c1509ac0166aaa889cebd29f3b077cb446f7a27c9742c
            env:
              INIT_POSTGRES_DBNAME: &dbName autobrr
              INIT_POSTGRES_HOST: &dbHost postgres-v17-rw.database.svc.cluster.local
              INIT_POSTGRES_SSLMODE: require
              INIT_POSTGRES_SSLROOTCERT: /etc/ssl/certs/postgres-caa.crt
              INIT_POSTGRES_USER:
                valueFrom:
                  secretKeyRef:
                    name: &secret "{{ .Release.Name }}-secret"
                    key: &pgUser POSTGRES_USERNAME
              INIT_POSTGRES_PASS:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: &pgPass POSTGRES_PASSWORD
              INIT_POSTGRES_SUPER_USER: postgres-db-manager
              INIT_POSTGRES_SUPER_PASS:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: POSTGRES_SUPER_PASS
            securityContext: &securityContext
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }

        containers:
          app:
            image:
              repository: ghcr.io/d4rkfella/autobrr-distroless
              tag: 1.60.0@sha256:bf013835e916017406c1a1bfe6e569fbbff18911c4e0f07a16e62b2d1fe7f14a
            env:
              TZ: Europe/Sofia
              AUTOBRR__CHECK_FOR_UPDATES: "false"
              AUTOBRR__HOST: 0.0.0.0
              AUTOBRR__PORT: &port 80
              AUTOBRR__LOG_PATH: /config/log
              AUTOBRR__LOG_LEVEL: INFO
              AUTOBRR__OIDC_DISABLE_BUILT_IN_LOGIN: "true"
              AUTOBRR__DATABASE_TYPE: postgres
              AUTOBRR__POSTGRES_DATABASE: *dbName
              AUTOBRR__POSTGRES_HOST: *dbHost
              AUTOBRR__POSTGRES_PORT: 5432
              AUTOBRR__POSTGRES_SSLMODE: verify-full
              AUTOBRR__POSTGRES_EXTRA_PARAMS: "sslrootcert=/etc/ssl/certs/postgres-ca.crt"
              AUTOBRR__SESSION_SECRET:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: SESSION_SECRET
              AUTOBRR__POSTGRES_USER:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: *pgUser
              AUTOBRR__POSTGRES_PASS:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: *pgPass
              AUTOBRR__OIDC_ENABLED: "true"
              AUTOBRR__OIDC_ISSUER: https://accounts.darkfellanetwork.com/realms/DarkfellaNET
              AUTOBRR__OIDC_CLIENT_ID: 93ebcd6f-7b49-4967-bb42-9b9634c67c14
              AUTOBRR__OIDC_CLIENT_SECRET:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: CLIENT_SECRET
              AUTOBRR__OIDC_REDIRECT_URL: https://autobrr.darkfellanetwork.com/api/auth/oidc/callback
            probes:
              liveness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/healthz/liveness
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/healthz/readiness
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
            securityContext: *securityContext
            resources:
              requests:
                cpu: 10m
              limits:
                cpu: 2000m
                memory: 256Mi

    defaultPodOptions:
      hostAliases:
        - ip: "192.168.91.52"
          hostnames:
            - "radarr.darkfellanetwork.com"
            - "sonarr.darkfellanetwork.com"
            - "cross-seed.darkfellanetwork.com"
        - ip: "192.168.91.51"
          hostnames:
            - "accounts.darkfellanetwork.com"
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
        fsGroupChangePolicy: Always
        seccompProfile: { type: RuntimeDefault }

    service:
      app:
        controller: autobrr
        ports:
          http:
            port: *port

    serviceMonitor:
      app:
        serviceName: autobrr
        endpoints:
          - port: metrics

    route:
      app:
        hostnames: ["{{ .Release.Name }}.darkfellanetwork.com"]
        parentRefs:
          - name: internal
            namespace: kube-system
            sectionName: https
        rules:
          - backendRefs:
              - name: *app
                port: *port

    persistence:
      config:
        type: emptyDir
        advancedMounts:
          autobrr:
            app:
              - path: /config

      tmp:
        type: emptyDir
        advancedMounts:
          autobrr:
            app:
              - path: /tmp

      postgres-ca:
        type: secret
        name: *secret
        advancedMounts:
          autobrr:
            app:
              - path: /etc/ssl/certs/postgres-ca.crt
                subPath: ca.crt
                readOnly: true
            init-db:
              - path: /etc/ssl/certs/postgres-ca.crt
                subPath: ca.crt
                readOnly: true
