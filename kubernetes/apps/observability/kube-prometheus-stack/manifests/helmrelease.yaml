---
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: OCIRepository
metadata:
  name: kube-prometheus-stack
spec:
  interval: 1h
  layerSelector:
    mediaType: application/vnd.cncf.helm.chart.content.v1.tar+gzip
    operation: copy
  ref:
    tag: 72.3.1
  url: oci://ghcr.io/prometheus-community/charts/kube-prometheus-stack
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: kube-prometheus-stack
  driftDetection:
    mode: enabled
    ignore:
      # Ignore "validated" annotation which is not inserted during install
      - paths: ["/metadata/annotations/prometheus-operator-validated"]
        target:
          kind: PrometheusRule
  postRenderers:
  - kustomize:
      patches:
      - target:
          group: monitoring.coreos.com
          kind: Prometheus
          name: kube-prometheus-stack
        patch: |
          - op: remove
            path: /spec/alerting
  install:
    crds: Skip
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    crds: Skip
    remediation:
      strategy: rollback
      retries: 3
  valuesFrom:
    - kind: ConfigMap
      name: prometheus-values
  values:
    crds:
      enabled: false
    cleanPrometheusOperatorObjectNames: true
    alertmanager:
      service:
        targetPort: 8082
      serviceMonitor:
        selfMonitor: false
      route:
        main:
          enabled: true
          hostnames: ["alertmanager.darkfellanetwork.com"]
          parentRefs:
            - name: internal
              namespace: envoy-gateway-system
              sectionName: https
      alertmanagerSpec:
        listenLocal: true
        externalUrl: "https://alertmanager.darkfellanetwork.com"
        alertmanagerConfiguration:
          name: alertmanager
          global:
            resolveTimeout: 5m
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: openebs-zfs-128k
              resources:
                requests:
                  storage: 1Gi
        volumes:
          - name: &secret alertmanager-secret
            secret:
              secretName: *secret
              defaultMode: 256
        initContainers:
          - name: oauth-proxy
            image: quay.io/oauth2-proxy/oauth2-proxy:v7.9.0@sha256:37c1570c0427e02fc7c947ef2c04e8995b8347b7abc9fcf1dbb4e376a4b221a7
            args:
            - --config=/etc/oauth2-proxy.cfg
            env:
              - name: OAUTH2_PROXY_REDIS_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: DRAGONFLY_PASSWORD
            livenessProbe:
              httpGet:
                path: /oauth2/ping
                port: &port 8082
                scheme: HTTP
              initialDelaySeconds: 5
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            readinessProbe:
              httpGet:
                path: /oauth2/ready
                port: *port
                scheme: HTTP
              initialDelaySeconds: 5
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            restartPolicy: Always
            volumeMounts:
              - name: *secret
                mountPath: /etc/oauth2-proxy.cfg
                subPath: oauth2-proxy.cfg
                readOnly: true
              - name: *secret
                mountPath: /etc/ssl/certs/Internal-Root-CA.crt
                subPath: ca.crt
                readOnly: true
        securityContext:
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
          fsGroup: 65532
          fsGroupChangePolicy: Always
          seccompProfile:
            type: RuntimeDefault
    prometheus:
      service:
        targetPort: 8082
      serviceMonitor:
        selfMonitor: false
      route:
        main:
          enabled: true
          hostnames: ["prometheus.darkfellanetwork.com"]
          parentRefs:
            - name: internal
              namespace: envoy-gateway-system
              sectionName: https
      prometheusSpec:
        listenLocal: true
        externalUrl: "https://prometheus.darkfellanetwork.com"
        podMetadata:
          annotations:
            vault.hashicorp.com/agent-inject: "true"
            vault.hashicorp.com/agent-init-first: "true"
            vault.hashicorp.com/agent-inject-token: "true"
            vault.hashicorp.com/role: "prometheus"
            vault.hashicorp.com/agent-inject-containers: "prometheus"
            vault.hashicorp.com/agent-run-as-group: "65532"
            vault.hashicorp.com/tls-server-name: "vault.darkfellanetwork.com"
        additionalAlertManagerConfigs:
          - scheme: https
            follow_redirects: true
            enable_http2: true
            path_prefix: /
            timeout: 30s
            api_version: v2
            tls_config:
              insecure_skip_verify: false
            static_configs:
              - targets:
                - "alertmanager.darkfellanetwork.com"
            oauth2:
              client_id: b257908e-34ad-4933-98a0-ca00ff6fcfdd
              client_secret_file: /vault/secrets/client_secret
              token_url: https://accounts.darkfellanetwork.com/realms/DarkfellaNET/protocol/openid-connect/token
              scopes: ["openid", "profile", "email"]
              endpoint_params:
                grant_type: client_credentials
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        ruleSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        enableAdminAPI: false
        enableFeatures:
          - memory-snapshot-on-shutdown
        retention: 14d
        retentionSize: 70GB
        resources:
          requests:
            cpu: 100m
          limits:
            memory: 1500Mi
        walCompression: false
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: openebs-zfs-128k
              resources:
                requests:
                  storage: 75Gi
        additionalScrapeConfigs:
          - job_name: vault
            metrics_path: /v1/sys/metrics
            params:
              format: ['prometheus']
            scheme: https
            authorization:
              credentials_file: /vault/secrets/token
            tls_config:
              insecure_skip_verify: false
            static_configs:
              - targets:
                - "vault.darkfellanetwork.com:8200"
        volumes:
          - name: &secret prometheus-secret
            secret:
              secretName: *secret
              defaultMode: 256
        volumeMounts:
          - name: *secret
            mountPath: /vault/secrets/client_secret
            subPath: client_secret
            readOnly: true
        hostAliases:
          - ip: "192.168.91.51"
            hostnames:
              - "accounts.darkfellanetwork.com"
        initContainers:
          - name: oauth-proxy
            image: quay.io/oauth2-proxy/oauth2-proxy:v7.9.0@sha256:37c1570c0427e02fc7c947ef2c04e8995b8347b7abc9fcf1dbb4e376a4b221a7
            args:
            - --config=/etc/oauth2-proxy.cfg
            env:
              - name: OAUTH2_PROXY_REDIS_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: DRAGONFLY_PASSWORD
            livenessProbe:
              httpGet:
                path: /oauth2/ping
                port: &port 8082
                scheme: HTTP
              initialDelaySeconds: 5
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            readinessProbe:
              httpGet:
                path: /oauth2/ready
                port: *port
                scheme: HTTP
              initialDelaySeconds: 5
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            restartPolicy: Always
            volumeMounts:
              - name: *secret
                mountPath: /etc/oauth2-proxy.cfg
                subPath: oauth2-proxy.cfg
                readOnly: true
              - name: *secret
                mountPath: /etc/ssl/certs/Internal-Root-CA.crt
                subPath: ca.crt
                readOnly: true
        securityContext:
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
          fsGroup: 65532
          fsGroupChangePolicy: Always
          seccompProfile:
            type: RuntimeDefault

    kubeApiServer:
      serviceMonitor:
        metricRelabelings:
          - action: drop
            sourceLabels: ["__name__"]
            regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
          - action: drop
            sourceLabels: ["__name__"]
            regex: apiserver_(response|watch_events)_sizes_bucket
          - action: drop
            sourceLabels: ["__name__"]
            regex: apiserver_request_body_size_bytes_bucket
          - action: drop
            sourceLabels: ["__name__"]
            regex: workqueue_(work|queue)_duration_seconds_bucket

    kubelet:
      serviceMonitor:
        interval: 1m
        scrapeTimeout: 10s
        cAdvisorMetricRelabelings:
          # Drop less useful container CPU metrics.
          - sourceLabels: [__name__]
            action: drop
            regex: "container_cpu_(cfs_throttled_seconds_total|load_average_10s|system_seconds_total|user_seconds_total)"
          # Drop less useful / always zero container memory metrics.
          - sourceLabels: [__name__]
            action: drop
            regex: "container_memory_(failures_total|mapped_file|swap)"
          # Drop less useful container process metrics.
          - sourceLabels: [__name__]
            action: drop
            regex: "container_(file_descriptors|tasks_state|threads_max)"
          # Drop less useful container filesystem metrics.
          - sourceLabels: [__name__]
            action: drop
            regex: "container_fs_(io_current|io_time_seconds_total|io_time_weighted_seconds_total|reads_merged_total|sector_reads_total|sector_writes_total|writes_merged_total)"
          # Drop less useful container blkio metrics.
          - sourceLabels: [__name__]
            action: drop
            regex: "container_blkio_device_usage_total"
          # Drop container spec metrics that overlap with kube-state-metrics.
          - sourceLabels: [__name__]
            action: drop
            regex: "container_spec.*"
          # Drop cgroup metrics with no pod.
          - sourceLabels: [id, pod]
            action: drop
            regex: ".+;"
          # Drop high-cardinality labels.
          - action: labeldrop
            regex: (uid|id|name|pod_uid|interface)
        probesMetricRelabelings:
          - action: drop
            sourceLabels: ["__name__"]
            regex: prober_probe_duration_seconds_bucket
        metricRelabelings:
          # Drop high-cardinality labels.
          - action: labeldrop
            regex: (uid|id|name|pod_uid|interface)
          - action: drop
            sourceLabels: ["__name__"]
            regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)

    kubeControllerManager:
      endpoints: &cp
        - 192.168.91.9
      serviceMonitor:
        metricRelabelings:
          - action: drop
            sourceLabels: ["__name__"]
            regex: workqueue_(work|queue)_duration_seconds_bucket

    kubeEtcd:
      endpoints: *cp

    kubeScheduler:
      endpoints: *cp
      serviceMonitor:
        metricRelabelings:
          - action: drop
            sourceLabels: ["__name__"]
            regex: workqueue_(work|queue)_duration_seconds_bucket
          - action: drop
            regex: scheduler_plugin_execution_duration_seconds_bucket;(0.005|0.01|0.025|0.05|0.1|0.15|0.2|0.25|0.3|0.35|0.4|0.45|0.5|0.6|0.7|0.8|0.9|1.25|1.5|1.75|2|2.5|3|3.5|4|4.5|5|6|7|8|9|15|20|25|30|40|50)
            sourceLabels: ["__name__", "le"]

    nodeExporter:
      enabled: false
      forceDeployDashboards: true

    kubeProxy:
      enabled: false

    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      metricLabelsAllowlist:
        - pods=[*]
        - deployments=[*]
        - persistentvolumeclaims=[*]
        - nodes=[*]
      prometheus:
        monitor:
          enabled: true
          metricRelabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
            - action: labeldrop
              regex: (uid)

    grafana:
      enabled: false
      forceDeployDashboards: true

    prometheusOperator:
      fullnameOverride: prometheus-operator
      serviceAccount:
        name: prometheus-operator
      admissionWebhooks:
        certManager:
          enabled: true
          admissionCert:
            duration: 2160h # 90d
          issuerRef:
            name: vault-issuer
            kind: ClusterIssuer
            group: cert-manager.io

    additionalPrometheusRulesMap:
      dockerhub-rules:
        groups:
          - name: dockerhub
            rules:
              - alert: DockerhubRateLimitRisk
                annotations:
                  summary: Kubernetes cluster Dockerhub rate limit risk
                expr: count(time() - container_last_seen{image=~"(docker.io).*",container!=""} < 30) > 100
                labels:
                  severity: critical
      oom-rules:
        groups:
          - name: oom
            rules:
              - alert: OomKilled
                expr: kube_pod_container_status_last_terminated_reason{reason="OOMKilled"} == 1
                for: 0m
                labels:
                  severity: critical
                annotations:
                  summary: Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} was last terminated due to OOMKilled.
      zfs-rules:
        groups:
          - name: zfs
            rules:
              - alert: ZfsUnexpectedPoolState
                annotations:
                  summary: ZFS pool {{$labels.zpool}} on {{$labels.instance}} is in a unexpected state {{$labels.state}}
                expr: node_zfs_zpool_state{state!="online"} > 0
                labels:
                  severity: critical
