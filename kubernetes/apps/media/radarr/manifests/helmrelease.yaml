---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app radarr
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template

  values:
    controllers:
      radarr:
        annotations:
          reloader.stakater.com/auto: "true"

        initContainers:
          init-db:
            image:
              repository: ghcr.io/d4rkfella/postgres-init
              tag: 0.1.0@sha256:11795769214505f9aee9314d0dc2086fb4f8f2dd16d08739e1734fd719884eda
            env:
              POSTGRES_DBNAME: &dbName radarr
              POSTGRES_HOST: &dbHost postgres-v17-rw.database.svc.cluster.local
              POSTGRES_SSLMODE: require
              POSTGRES_USER:
                valueFrom:
                  secretKeyRef:
                    name: &secret "{{ .Release.Name }}-secret"
                    key: &pgUser POSTGRES_USERNAME
              POSTGRES_PASS:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: &pgPass POSTGRES_PASSWORD
              POSTGRES_SUPER_USER: postgres
              POSTGRES_SUPER_PASS:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: POSTGRES_SUPER_PASS
            securityContext: &securityContext
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }

          oauth2-proxy:
            image:
              repository: quay.io/oauth2-proxy/oauth2-proxy
              tag: v7.12.0@sha256:786bed0f000c0f8a7b31619244ebab02406a8856a4faf3f5fb1df61fbd6c30ed
            args:
              - --config=/etc/oauth2-proxy.cfg
            env:
              OAUTH2_PROXY_REDIS_PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: DRAGONFLY_PASSWORD
            probes:
              liveness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /oauth2/ping
                    port: &port 4180
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /oauth2/ready
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
            securityContext: *securityContext
            restartPolicy: Always

        containers:
          app:
            image:
              repository: ghcr.io/d4rkfella/radarr
              tag: 6.0.1@sha256:9536e60fa4cca167e6e2e0c091d57fbef5578f03d6b5e632d2afc899026f7ef1
            env:
              TZ: Europe/Sofia
              RADARR__APP__INSTANCENAME: Radarr
              RADARR__APP__THEME: dark
              RADARR__AUTH__METHOD: External
              RADARR__AUTH__REQUIRED: DisabledForLocalAddresses
              RADARR__LOG__DBENABLED: "False"
              RADARR__LOG__LEVEL: info
              RADARR__SERVER__PORT: 80
              RADARR__SERVER__BINDADDRESS: 127.0.0.1
              RADARR__AUTH__APIKEY:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: RADARR_API_KEY
              RADARR__POSTGRES__HOST: *dbHost
              RADARR__POSTGRES__MAINDB: *dbName
              RADARR__POSTGRES__USER:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: *pgUser
              RADARR__POSTGRES__PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: *pgPass
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 2
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext: *securityContext
            resources:
              requests:
                cpu: 100m
                memory: 512Mi
              limits:
                memory: 4Gi

    defaultPodOptions:
      hostAliases:
        - ip: "192.168.91.52"
          hostnames:
            - "prowlarr.darkfellanetwork.com"
            - "qbittorrent.darkfellanetwork.com"
            - "autobrr.darkfellanetwork.com"
        - ip: "192.168.91.51"
          hostnames:
            - "accounts.darkfellanetwork.com"
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }

    service:
      app:
        controller: *app
        ports:
          http:
            port: *port

    route:
      app:
        hostnames: ["{{ .Release.Name }}.darkfellanetwork.com"]
        parentRefs:
          - name: internal
            namespace: envoy-gateway-system
            sectionName: https
        rules:
          - backendRefs:
              - name: *app
                port: *port

    persistence:
      config:
        suffix: config
        type: persistentVolumeClaim
        size: 15Gi
        accessMode: ReadWriteOnce
        storageClass: openebs-zfs-128k
        advancedMounts:
          radarr:
            app:
              - path: /config

      tmp:
        type: emptyDir
        advancedMounts:
          radarr:
            app:
              - path: /tmp

      media:
        type: nfs
        server: 192.168.91.40
        path: /mnt/exos20/data
        advancedMounts:
          radarr:
            app:
              - path: /data

      secrets:
        type: secret
        name: *secret
        defaultMode: 0440
        advancedMounts:
          radarr:
            oauth2-proxy:
              - path: /etc/oauth2-proxy.cfg
                subPath: oauth2-proxy.cfg
                readOnly: true
              - path: /etc/ssl/certs/Internal-Root-CA.crt
                subPath: ca.crt
                readOnly: true
