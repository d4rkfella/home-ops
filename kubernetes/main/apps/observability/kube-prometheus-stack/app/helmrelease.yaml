---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  interval: 30m
  timeout: 15m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 68.2.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  install:
    crds: Skip
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    crds: Skip
    remediation:
      strategy: rollback
      retries: 3
  dependsOn:
    - name: prometheus-operator-crds
      namespace: observability
  values:
    crds:
      enabled: false
    cleanPrometheusOperatorObjectNames: true
    alertmanager:
      #serviceMonitor:
        #selfMonitor: true
        #scheme: https
        #tlsConfig:
          #caFile: "/etc/ssl/certs/darkfellanet-root-ca.crt"
          #serverName: "alertmanager-operated.observability.svc.cluster.local"
        #enableHttp2: true
      service:
        port: 9093
      ingress:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: zerossl-prod
          cert-manager.io/private-key-rotation-policy: Always
          cert-manager.io/private-key-algorithm: ECDSA
          cert-manager.io/private-key-size: "384"
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          nginx.ingress.kubernetes.io/server-snippet: |
            proxy_ssl_name          kube-prometheus-stack-alertmanager.observability.svc.cluster.local;
            proxy_ssl_session_reuse on;
        ingressClassName: internal
        tls:
          - hosts: &host ["alertmanager.darkfellanetwork.com"]
            secretName: alertmanager-tls
        hosts: *host
        pathType: Prefix
      alertmanagerSpec:
        scheme: https
        volumes:
          - secret:
              defaultMode: 420
              secretName: alertmanager-internal-tls
            name: darkfellanet-root-ca
        volumeMounts:
          - mountPath: /etc/ssl/certs/darkfellanet-root-ca.crt
            name: darkfellanet-root-ca
            readOnly: true
            subPath: darkfellanet-root-ca.crt
        web:
          tlsConfig:
            keySecret:
              key: tls.key
              name: alertmanager-internal-tls
            cert:
              secret:
                key: tls.crt
                name: alertmanager-internal-tls
        useExistingSecret: true
        configSecret: alertmanager-secret
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: openebs-zfs-128k
              resources:
                requests:
                  storage: 1Gi
    kubeApiServer:
      serviceMonitor:
        selector:
          k8s-app: kube-apiserver
    kubeScheduler:
      service:
        selector:
          k8s-app: kube-scheduler
    kubeControllerManager: &kubeControllerManager
      service:
        selector:
          k8s-app: kube-controller-manager
    kubeEtcd:
      enabled: true
      service:
        selector:
          k8s-app: kube-controller-manager
      serviceMonitor:
        relabelings:
          - sourceLabels: [__meta_kubernetes_pod_node_name]
            separator: ;
            regex: ^(.*)$
            targetLabel: nodename
            replacement: $1
            action: replace
        metricRelabelings:
          - action: labeldrop
            regex: pod
    kubeProxy:
      enabled: false
    prometheus:
      service:
        targetPort: 8081
      serviceMonitor:
        selfMonitor: true
        #scheme: https
        #tlsConfig:
          #caFile: "/etc/ssl/certs/darkfellanet-root-ca.crt"
          #serverName: "prometheus-operated.observability.svc.cluster.local"
      ingress:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: zerossl-prod
          cert-manager.io/private-key-rotation-policy: Always
          cert-manager.io/private-key-algorithm: ECDSA
          cert-manager.io/private-key-size: "384"
        ingressClassName: internal
        tls:
          - hosts: &host ["prometheus.darkfellanetwork.com"]
            secretName: prometheus-tls
        hosts: *host
        pathType: Prefix
      prometheusSpec:
        listenLocal: true
        externalUrl: "https://prometheus.darkfellanetwork.com"
        podMetadata:
          annotations:
            vault.hashicorp.com/agent-inject: "true"
            vault.hashicorp.com/agent-init-first: "true"
            vault.hashicorp.com/agent-inject-token: "true"
            vault.hashicorp.com/role: "prometheus"
            vault.hashicorp.com/agent-run-as-user: "1000"
            vault.hashicorp.com/agent-run-as-group: "2000"
        #alertingEndpoints:
          #- name: "alertmanager-operated"
            #namespace: "observability"
            #port: 9093
            #scheme: https
            #pathPrefix: "/"
            #apiVersion: v2
            #tlsConfig:
              #caFile: "/etc/ssl/certs/darkfellanet-root-ca.crt"
              #serverName: "alertmanager-operated.observability.svc.cluster.local"
        scrapeInterval: 1m
        podMonitorSelector: &selector
          matchLabels: null
        probeSelector: *selector
        ruleSelector: *selector
        scrapeConfigSelector: *selector
        serviceMonitorSelector: *selector
        enableAdminAPI: false
        walCompression: true
        enableFeatures:
          - auto-gomemlimit
          - memory-snapshot-on-shutdown
          - new-service-discovery-manager
        retention: 14d
        retentionSize: 70GB
        resources:
          requests:
            cpu: 100m
          limits:
            memory: 1500Mi
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: openebs-zfs-128k
              resources:
                requests:
                  storage: 75Gi
        additionalScrapeConfigs:
          - job_name: vault
            metrics_path: /v1/sys/metrics
            params:
              format: ['prometheus']
            scheme: https
            authorization:
              credentials_file: /vault/secrets/token
            static_configs:
              - targets: ['vault.darkfellanetwork.com:8200']
        containers:
          - name: oauth-proxy
            image: quay.io/oauth2-proxy/oauth2-proxy:v7.8.1-amd64@sha256:543e19accc96055a00f42ed93525ae04008bea3d7debe1d912096f8f20978033
            args:
            - --config=/etc/secrets-store/oauth2-proxy.cfg
            ports:
            - containerPort: 8081
              name: oauth-proxy
              protocol: TCP
            resources: {}
            volumeMounts:
              - name: 'oauth-proxy-config'
                mountPath: '/etc/secrets-store/oauth2-proxy.cfg'
                subPath: 'oauth2-proxy.cfg'
                readOnly: true
              - name: 'oauth-proxy-config'
                mountPath: '/etc/ssl/certs/darkfellanet-internal-root-ca.crt'
                subPath: 'darkfellanet-internal-root-ca.crt'
                readOnly: true
        volumes:
          - name: oauth-proxy-config
            csi:
              driver: 'secrets-store.csi.k8s.io'
              readOnly: true
              volumeAttributes:
                secretProviderClass: 'oauth-proxy-config'
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      metricLabelsAllowlist:
        - pods=[*]
        - deployments=[*]
        - persistentvolumeclaims=[*]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
    grafana:
      enabled: false
      forceDeployDashboards: true
