---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: sabnzbd
  annotations:
    kustomize.toolkit.fluxcd.io/substitute: disabled
spec:
  interval: 30m
  chart:
    spec:
      verify:
        provider: cosign
      chart: app-template
      version: 3.6.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  dependsOn:
    - name: volsync
      namespace: volsync-system

  values:
    controllers:
      sabnzbd:
        annotations:
          reloader.stakater.com/auto: "true"

        containers:
          oauth2-proxy:
            image:
              repository: quay.io/oauth2-proxy/oauth2-proxy
              tag: v7.7.1-amd64@sha256:95f2002754cb0f1c1553aed56f4d6564a5b860e01baccb4e1b8311ffa25c167c
            args:
              - --config=/etc/oauth2-proxy.cfg
            env:
              OAUTH2_PROXY_CLIENT_ID:
                valueFrom:
                  secretKeyRef:
                    name: &secret "{{ .Release.Name }}-secret"
                    key: CLIENT_ID
              OAUTH2_PROXY_CLIENT_SECRET:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: CLIENT_SECRET
              OAUTH2_PROXY_COOKIE_SECRET:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: COOKIE_SECRET
              OAUTH2_PROXY_REDIS_PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: DRAGONFLY_PASSWORD
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
              runAsUser: 65534
              runAsGroup: 65534

          app:
            image:
              repository: ghcr.io/onedr0p/sabnzbd
              tag: 4.4.1@sha256:4188d3c29c53de1018edcfd5dc2d0a0c7955b9a239b91ff6c859626abd3494dc
            env:
              TZ: Europe/Sofia
              SABNZBD__PORT: &port 80
              SABNZBD__ADDRESS: 127.0.0.1
              SABNZBD__API_KEY:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: API_KEY
              SABNZBD__NZB_KEY:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: NZB_KEY
              CROSS_SEED_API_KEY:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: CROSS_SEED_API_KEY
              PUSHOVER_TOKEN:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: PUSHOVER_TOKEN
              PUSHOVER_USER_KEY:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: PUSHOVER_USER_KEY
              SABNZBD__HOST_WHITELIST_ENTRIES: >-
                sabnzbd,
                sabnzbd.media,
                sabnzbd.media.svc,
                sabnzbd.media.svc.cluster,
                sabnzbd.media.svc.cluster.local,
                sabnzbd.darkfellanetwork.com
              CROSS_SEED_HOST: cross-seed.media.svc.cluster.local
              CROSS_SEED_ENABLED: false
              CROSS_SEED_PORT: 80
              CROSS_SEED_SLEEP_INTERVAL: 30
              PUSHOVER_ENABLED: true
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api?mode=version
                    port: 4180
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: true
                spec:
                  failureThreshold: 30
                  periodSeconds: 10
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 100m
                memory: 512Mi
              limits:
                memory: 8Gi

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
        runAsGroup: 2000
        fsGroup: 2000
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }

    service:
      app:
        controller: sabnzbd
        ports:
          http:
            port: 4180

    ingress:
      app:
        annotations:
          external-dns.alpha.kubernetes.io/target: internal.darkfellanetwork.com
          nginx.ingress.kubernetes.io/configuration-snippet: |
            proxy_set_header Accept-Encoding "";
            sub_filter '</body>' '<link rel="stylesheet" type="text/css" href="https://theme-park.dev/css/base/sabnzbd/mind.css"></body>';
            sub_filter_once on;
          cert-manager.io/cluster-issuer: zerossl-prod
          cert-manager.io/private-key-rotation-policy: Always
          cert-manager.io/private-key-algorithm: ECDSA
          cert-manager.io/private-key-size: "384"
        className: internal
        tls:
          - hosts:
              - &host "{{ .Release.Name }}.darkfellanetwork.com"
            secretName: sabnzbd-tls
        hosts:
          - host: *host
            paths:
              - path: /
                service:
                  identifier: app
                  port: http

    persistence:
      config:
        enabled: true
        type: persistentVolumeClaim
        size: 2Gi
        storageClass: openebs-zfs-128k
        accessMode: ReadWriteOnce
        advancedMounts:
          sabnzbd:
            app:
              - path: /config

      logs:
        type: emptyDir
        advancedMounts:
          sabnzbd:
            app:
              - path: /config/logs

      tmp:
        type: emptyDir
        advancedMounts:
          sabnzbd:
            app:
              - path: /tmp

      scripts:
        type: configMap
        name: sabnzbd-scripts
        defaultMode: 0550
        advancedMounts:
          sabnzbd:
            app:
              - path: /scripts
                readOnly: true

      media:
        type: nfs
        server: 192.168.91.40
        path: /mnt/exos20/data
        advancedMounts:
          sabnzbd:
            app:
              - path: /data/downloads/usenet
                subPath: downloads/usenet

      oauth2-proxy-config:
        type: configMap
        name: sabnzbd-oauth2-proxy-config
        advancedMounts:
          sabnzbd:
            oauth2-proxy:
              - path: /etc/oauth2-proxy.cfg
                subPath: oauth2-proxy.cfg
                readOnly: true

      dragonfly-ca-cert:
        type: secret
        name: *secret
        advancedMounts:
          sabnzbd:
            oauth2-proxy:
              - path: /etc/ssl/certs/dragonfly-ca.crt
                subPath: dragonfly-ca.crt
                readOnly: true

    rawResources:
      secret:
        enabled: true
        apiVersion: external-secrets.io/v1beta1
        kind: ExternalSecret
        spec:
          spec:
            secretStoreRef:
              kind: ClusterSecretStore
              name: vault-backend
            target:
              name: "{{ .Release.Name }}-secret"
              template:
                engineVersion: v2
                data:
                  CROSS_SEED_API_KEY: '{{ "{{ .CROSS_SEED_API_KEY }}" }}'
                  PUSHOVER_TOKEN: '{{ "{{ .SABNZBD_PUSHOVER_TOKEN }}" }}'
                  PUSHOVER_USER_KEY: '{{ "{{ .PUSHOVER_USER_KEY }}" }}'
                  API_KEY: &apiKey '{{ "{{ .SABNZBD_API_KEY }}" }}'
                  NZB_KEY: *apiKey
                  COOKIE_SECRET: '{{ "{{ .COOKIE_SECRET }}" }}'
                  CLIENT_SECRET: '{{ "{{ .CLIENT_SECRET}}" }}'
                  CLIENT_ID: '{{ "{{ .CLIENT_ID }}" }}'
                  DRAGONFLY_PASSWORD: '{{ "{{ .DRAGONFLY__PASSWORD }}" }}'
                  dragonfly-ca.crt: '{{ "{{ index . \"dragonfly-ca.crt\" }}" }}'
            dataFrom:
              - extract:
                  key: secrets/api-keys
              - extract:
                  key: pushover
              - extract:
                  key: secrets/oauth2/sabnzbd
              - extract:
                  key: secrets/dragonfly
            data:
              - secretKey: dragonfly-ca.crt
                remoteRef:
                  key: secrets/certificates/dragonfly
                  property: ca.crt
      volsync-secret:
        enabled: true
        apiVersion: external-secrets.io/v1beta1
        kind: ExternalSecret
        spec:
          spec:
            secretStoreRef:
              kind: ClusterSecretStore
              name: vault-backend
            target:
              name: &volsync-secret "{{ .Release.Name }}-volsync-secret"
              template:
                engineVersion: v2
                data:
                  RESTIC_REPOSITORY: '{{ "{{ .RESTIC_REPOSITORY }}" }}/{{ .Release.Name }}/volsync/config-volsync-config'
                  RESTIC_PASSWORD: '{{ "{{ .ENCRYPTION_KEY }}" }}'
                  AWS_ACCESS_KEY_ID: '{{ "{{ .CF_ACCESS_KEY_ID }}" }}'
                  AWS_SECRET_ACCESS_KEY: '{{ "{{ .CF_SECRET_ACCESS_KEY }}" }}'
            dataFrom:
              - extract:
                  key: secrets/volsync
              - extract:
                  key: secrets/cloudflare
      volsync-src:
        enabled: true
        apiVersion: volsync.backube/v1alpha1
        kind: ReplicationSource
        spec:
          spec:
            sourcePVC: &volsync-pvc sabnzbd-config
            trigger:
              schedule: "0 7 * * *"
            restic:
              copyMethod: Clone
              storageClassName: &storageClass openebs-zfs-128k
              pruneIntervalDays: 7
              repository: *volsync-secret
              cacheCapacity: 2Gi
              moverSecurityContext: &moverSecurityContext
                runAsUser: 2000
                runAsGroup: 2000
                fsGroup: 2000
              retain:
                daily: 7
                within: 3d
      volsync-dst:
        enabled: false
        apiVersion: volsync.backube/v1alpha1
        kind: ReplicationDestination
        spec:
          spec:
            trigger:
              manual: restore-once
            restic:
              repository: *volsync-secret
              copyMethod: Direct
              storageClassName: *storageClass
              destinationPVC: *volsync-pvc
              enableFileDeletion: true
              moverSecurityContext: *moverSecurityContext

    configMaps:
      oauth2-proxy-config:
        enabled: true
        data:
          oauth2-proxy.cfg: |
            email_domains = [ "*" ]
            upstreams = [ "http://127.0.0.1:80" ]
            reverse_proxy = true
            scope = "openid profile email"
            cookie_secure = true
            provider = "keycloak-oidc"
            oidc_issuer_url = "https://accounts.darkfellanetwork.com/realms/DarkfellaNET"
            code_challenge_method = "S256"
            cookie_domains = "sabnzbd.darkfellanetwork.com"
            whitelist_domains = "sabnzbd.darkfellanetwork.com"
            backend_logout_url = "https://accounts.darkfellanetwork.com/realms/DarkfellaNET/protocol/openid-connect/logout?id_token_hint={id_token}"
            skip_provider_button = true
            cookie_expire = "30m"
            cookie_refresh = "4m55s"
            allowed_groups = [ "Admins" ]
            redirect_url = "https://sabnzbd.darkfellanetwork.com/oauth2/callback"
            cookie_name = "__Secure-oauth2_proxy"
            skip_auth_routes = [ "(\\/|\\/([0-9]+)\\/)?api(\\/|$|[?])" ]
            http_address = "0.0.0.0:4180"
            cookie_csrf_per_request = true
            cookie_csrf_expire = "5m"
            ping_path = "/oauth2/ping"
            ready_path = "/oauth2/ready"
            cookie_samesite = "strict"
            session_store_type = "redis"
            redis_connection_url = "rediss://dragonfly-cluster.database.svc.cluster.local:6379"

      gatus-ep:
        enabled: true
        labels:
          gatus.io/enabled: "true"
        data:
          config.yaml: |
            endpoints:
              - name: "SABnzbd"
                group: guarded
                url: "https://sabnzbd.darkfellanetwork.com/api?mode=version"
                interval: 1m
                ui:
                  hide-hostname: true
                  hide-url: true
                client:
                  dns-resolver: tcp://172.17.0.10:53
                conditions:
                  - "[STATUS] == 200"
                  - "has([BODY].version) == true"
                alerts:
                  - type: pushover

      scripts:
        enabled: true
        data:
          post-process.sh: |
            #!/usr/bin/env bash
            # shellcheck disable=SC2154

            set -euo pipefail

            # User-defined variables
            CROSS_SEED_ENABLED="${CROSS_SEED_ENABLED:-false}"
            CROSS_SEED_HOST="${CROSS_SEED_HOST:-required}"
            CROSS_SEED_PORT="${CROSS_SEED_PORT:-required}"
            CROSS_SEED_API_KEY="${CROSS_SEED_API_KEY:-required}"
            CROSS_SEED_SLEEP_INTERVAL="${CROSS_SEED_SLEEP_INTERVAL:-30}"
            PUSHOVER_ENABLED="${PUSHOVER_ENABLED:-false}"
            PUSHOVER_USER_KEY="${PUSHOVER_USER_KEY:-required}"
            PUSHOVER_TOKEN="${PUSHOVER_TOKEN:-required}"

            # Function to set release variables from SABnzbd
            set_sab_vars() {
                RELEASE_NAME="${SAB_FILENAME:-}"
                RELEASE_DIR="${SAB_COMPLETE_DIR:-}"
                RELEASE_CAT="${SAB_CAT:-}"
                RELEASE_SIZE="${SAB_BYTES:-}"
                RELEASE_STATUS="${SAB_PP_STATUS:-}"
                RELEASE_INDEXER="${SAB_URL:-}"
                RELEASE_TYPE="NZB"
            }

            # Function to set release variables from qBittorrent
            set_qb_vars() {
                RELEASE_NAME="$1"      # %N
                RELEASE_DIR="$2"       # %F
                RELEASE_CAT="$3"       # %L
                RELEASE_SIZE="$4"      # %Z
                RELEASE_INDEXER="$5"   # %T
                RELEASE_STATUS=0       # Always 0 for qBittorrent
                RELEASE_TYPE="Torrent"
            }

            # Function to send pushover notification
            send_pushover_notification() {
                local pushover_message status_code json_data
                printf -v pushover_message \
                    "<b>%s</b><small>\n<b>Category:</b> %s</small><small>\n<b>Indexer:</b> %s</small><small>\n<b>Size:</b> %s</small>" \
                        "${RELEASE_NAME%.*}" \
                        "${RELEASE_CAT}" \
                        "$(trurl --url "${RELEASE_INDEXER}" --get '{idn:host}')" \
                        "$(numfmt --to iec --format "%8.2f" "${RELEASE_SIZE}")"

                json_data=$(jo \
                    token="${PUSHOVER_TOKEN}" \
                    user="${PUSHOVER_USER_KEY}" \
                    title="${RELEASE_TYPE} Downloaded" \
                    message="${pushover_message}" \
                    priority="-2" \
                    html="1"
                )

                status_code=$(curl \
                    --silent \
                    --write-out "%{http_code}" \
                    --output /dev/null \
                    --request POST  \
                    --header "Content-Type: application/json" \
                    --data-binary "${json_data}" \
                    "https://api.pushover.net/1/messages.json"
                )

                printf "pushover notification returned with HTTP status code %s and payload: %s\n" \
                    "${status_code}" \
                    "$(echo "${json_data}" | jq --compact-output)" >&2
            }

            # Function to search for cross-seed
            search_cross_seed() {
                local status_code
                status_code=$(curl \
                    --silent \
                    --output /dev/null \
                    --write-out "%{http_code}" \
                    --request POST \
                    --data-urlencode "path=${RELEASE_DIR}" \
                    --header "X-Api-Key: ${CROSS_SEED_API_KEY}" \
                    "http://${CROSS_SEED_HOST}:${CROSS_SEED_PORT}/api/webhook"
                )

                printf "cross-seed search returned with HTTP status code %s and path %s\n" \
                    "${status_code}" \
                    "${RELEASE_DIR}" >&2

                sleep "${CROSS_SEED_SLEEP_INTERVAL}"
            }

            main() {
                # Determine the source and set release variables accordingly
                if env | grep -q "^SAB_"; then
                    set_sab_vars
                else
                    set_qb_vars "$@"
                fi

                # Check if post-processing was successful
                if [[ "${RELEASE_STATUS}" -ne 0 ]]; then
                    printf "post-processing failed with sabnzbd status code %s\n" \
                        "${RELEASE_STATUS}" >&2
                    exit 1
                fi

                # Send pushover notification
                if [[ "${PUSHOVER_ENABLED}" == "true" ]]; then
                    send_pushover_notification
                fi

                # Search for cross-seed
                if [[ "${CROSS_SEED_ENABLED}" == "true" ]]; then
                    search_cross_seed
                fi
            }

            main "$@"
