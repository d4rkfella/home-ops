---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app radarr
  annotations:
    kustomize.toolkit.fluxcd.io/substitute: disabled
spec:
  interval: 30m
  chart:
    spec:
      verify:
        provider: cosign
      chart: app-template
      version: 3.6.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3

  values:
    controllers:
      radarr:
        annotations:
          reloader.stakater.com/auto: "true"

        initContainers:
          init-db:
            image:
              repository: ghcr.io/buroa/postgres-init
              tag: 17.2@sha256:92f971d2d9ebe4b060b4bc44dfb13e0baaf68489184b742fae42cc83c7a78c0c
            env:
              INIT_POSTGRES_DBNAME: &dbName radarr
              INIT_POSTGRES_HOST: &dbHost postgres17-rw.database.svc.cluster.local
              INIT_POSTGRES_USER:
                valueFrom:
                  secretKeyRef:
                    name: &secret "{{ .Release.Name }}-secret"
                    key: POSTGRES_USER
              INIT_POSTGRES_PASS:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: POSTGRES_PASS
              INIT_POSTGRES_SUPER_PASS:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: POSTGRES_SUPER_PASS
            securityContext: &securityContext
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }

        containers:
          oauth2-proxy:
            image:
              repository: quay.io/oauth2-proxy/oauth2-proxy
              tag: v7.8.1-amd64@sha256:543e19accc96055a00f42ed93525ae04008bea3d7debe1d912096f8f20978033
            args:
              - --config=/etc/oauth2-proxy.cfg
            securityContext: *securityContext

          app:
            image:
              repository: ghcr.io/onedr0p/radarr-develop
              tag: 5.18.1.9612@sha256:64364aa80c8e7bb1350c77a0400dcf7da298cf06c44c84081937955bbbd01e4c
            env:
              TZ: Europe/Sofia
              RADARR__APP__INSTANCENAME: Radarr
              RADARR__APP__THEME: dark
              RADARR__AUTH__METHOD: External
              RADARR__AUTH__REQUIRED: DisabledForLocalAddresses
              RADARR__LOG__DBENABLED: "False"
              RADARR__LOG__LEVEL: info
              RADARR__SERVER__PORT: &port 80
              RADARR__SERVER__BINDADDRESS: 127.0.0.1
              RADARR__UPDATE__BRANCH: develop
              RADARR__AUTH__APIKEY:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: API_KEY
              RADARR__POSTGRES__HOST: *dbHost
              #RADARR__POSTGRES__PORT: 5432
              RADARR__POSTGRES__USER:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: POSTGRES_USER
              RADARR__POSTGRES__PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: *secret
                    key: POSTGRES_PASS
              RADARR__POSTGRES__MAINDB: *dbName
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: 4180
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext: *securityContext
            resources:
              requests:
                cpu: 100m
                memory: 512Mi
              limits:
                memory: 4Gi

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
        runAsGroup: 2000
        fsGroup: 2000
        fsGroupChangePolicy: Always
        seccompProfile: { type: RuntimeDefault }

    service:
      app:
        controller: *app
        ports:
          http:
            port: 4180

    ingress:
      app:
        annotations:
          nginx.ingress.kubernetes.io/configuration-snippet: |
            proxy_set_header Accept-Encoding "";
            sub_filter '</body>' '<link rel="stylesheet" type="text/css" href="https://theme-park.dev/css/base/radarr/mind.css"></body>';
            sub_filter_once on;
          cert-manager.io/cluster-issuer: zerossl-prod
          cert-manager.io/private-key-rotation-policy: Always
          cert-manager.io/private-key-algorithm: ECDSA
          cert-manager.io/private-key-size: "384"
        className: internal
        tls:
          - hosts:
              - &host "{{ .Release.Name }}.darkfellanetwork.com"
            secretName: radarr-tls
        hosts:
          - host: *host
            paths:
              - path: /
                service:
                  identifier: app
                  port: 4180

    persistence:
      config:
        enabled: true
        type: persistentVolumeClaim
        size: 15Gi
        accessMode: ReadWriteOnce
        storageClass: openebs-zfs-128k
        advancedMounts:
          radarr:
            app:
              - path: /config

      tmp:
        type: emptyDir
        advancedMounts:
          radarr:
            app:
              - path: /tmp

      media:
        type: nfs
        server: 192.168.91.40
        path: /mnt/exos20/data
        advancedMounts:
          radarr:
            app:
              - path: /data

      oauth2-proxy-config:
        type: secret
        name: *secret
        defaultMode: 0440
        advancedMounts:
          radarr:
            oauth2-proxy:
              - path: /etc/oauth2-proxy.cfg
                subPath: oauth2-proxy.cfg
                readOnly: true

      darkfellanet-root-ca:
        type: secret
        name: *secret
        defaultMode: 0440
        advancedMounts:
          radarr:
            oauth2-proxy:
              - path: /etc/ssl/certs/darkfellanet-root-ca.crt
                subPath: ca.crt
                readOnly: true

    rawResources:
      secret:
        enabled: true
        apiVersion: external-secrets.io/v1beta1
        kind: ExternalSecret
        spec:
          spec:
            secretStoreRef:
              kind: ClusterSecretStore
              name: vault-backend
            target:
              name: "{{ .Release.Name }}-secret"
            data:
              - secretKey: &key ca.crt
                remoteRef:
                  key: secrets/certificates/darkfellanet-internal
                  property: *key
              - secretKey: &key POSTGRES_SUPER_PASS
                remoteRef:
                  key: secrets/cloudnative-pg
                  property: *key
              - secretKey: &key oauth2-proxy.cfg
                remoteRef:
                  key: &path secrets/radarr
                  property: *key
              - secretKey: &key API_KEY
                remoteRef:
                  key: *path
                  property: *key
              - secretKey: &key POSTGRES_USER
                remoteRef:
                  key: *path
                  property: *key
              - secretKey: &key POSTGRES_PASS
                remoteRef:
                  key: *path
                  property: *key

    configMaps:
      gatus-ep:
        enabled: true
        labels:
          gatus.io/enabled: "true"
        data:
          config.yaml: |
            endpoints:
              - name: "Radarr"
                group: guarded
                url: "https://radarr.darkfellanetwork.com/ping"
                interval: 1m
                ui:
                  hide-hostname: true
                  hide-url: true
                client:
                  dns-resolver: tcp://172.17.0.10:53
                conditions:
                  - "[STATUS] == 200"
                  - "[BODY].status == OK"
                alerts:
                  - type: pushover
